#!/bin/bash

# Script for cp2k job submission in Daint
# Usage: ./cp2k [options] input.inp
#   Options:
#    --manual, -m The script will display all the available queues and
#                 it will ask for all required options.
#    --queue, -q  Name of que queue
#    --nodes, -n  Number of nodes
#    --time, -t   Maximum time for the job
#
# input.inp can be any name, the .inp extension is optional

# This script will:
# 1 Setup the queue, number of nodes and max time for the job
#   by default it will use normal queue with 1 node and 6 hours.
# 2 Copy the input to the scratch directory
#   create the jobfile for the slurm system and submit the calculation
# 3 Submit the jobfile
#
# The calculation itself is run using the jobfile script,
# it also deletes temporal files and copies the output to the
# directory where this script was called with the name input.out

# Account for the queueing system
account=""
# Set the path to CP2K
cp2k_path=""
# Scratch directory
scr=$SCRATCH

# Current directory (the output will be copied to this directory)
wrk=$(pwd)

# Select a queue
select_queue () {
  sinfo --format "%10R %.11s %.10l %.6D %.7X %.5Y %.7Z %.4c %.5a"
  echo "select a queue (PARTITION name):"
  read inp
  if sinfo --format "%10R" | grep -q $inp; then
    queue=$inp
  else
    echo "Invalid queue"
    exit 1
  fi
}


# Script body

#####################################
### 1 Setup queue, nodes and time ###
#####################################

# Read command-line options
if [[ $# -eq 1 ]]; then
  if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
      echo "Usage: runcp2k [options] input"
      cat <<-_EOF_
	-m Manual, will ask for all options
	-q Name of que queue
	-n Number of nodes
	-t Maximum time for the job
	_EOF_
	exit 1
  else
# Default settings
    queue=normal
    nodes=1
    t=06:00:00
  fi
fi

while [[ $# -gt 1 ]]; do
  case "$1" in
    --manual|-m)
      select_queue
      shift 1
      ;;
    --queue|-q)
      queue=$2
      shift 2
      ;;
    --nodes|-n)
      nodes=$2
      shift 2
      ;;
    --time|-t)
      t=$2
      shift 2
      ;;
    *)
      echo "Invalid option"
      exit 1
      ;;
  esac
done

# Name of the input, the extension .inp is optional
if [ -z "$1" ]; then
  echo "You need to specify an input name"
  exit 1
else
  name=$1
fi

# Print available queues
if [ -z $queue ]; then
  select_queue
else
  inp=$queue
fi

# Setup parameters for the job
min_t=00:30:00
min_n=$(sinfo --format "%10R %s" | grep normal | tr -s ' ' | cut -d ' ' -f 2 | cut -d '-' -f 1)
max_n=$(sinfo --format "%10R %s" | grep normal | tr -s ' ' | cut -d ' ' -f 2 | cut -d '-' -f 2)
maxtime=$(sinfo --format "%10R %l" | grep $queue | tr -s ' ' | cut -d ' ' -f 2)

# Select the number of nodes for the calculation
if [ ! "$max_n" == "1" ]; then
  if [ -z $nodes ]; then
    echo "How many nodes? (Max: $max_n)"
    read inp
  else
    inp=$nodes
  fi
  # Is the number of nodes a positive integer?
  if [[ ! $inp =~ ^[0-9]+$ ]]; then
    echo "Number of nodes is not a number"
    exit 1
  fi
  # Is the number of nodes larger than the minimum?
  if (( $inp < $min_n )); then
    echo "Number of nodes in $queue queue must be between $min_n-$max_n"
    exit 1
  fi
  # Is the number of nodes smallr than the maximum?
  if [ ! "$max_n" == "infinite" ]; then
    if (( $inp > $max_n )); then
      echo "Number of nodes in $queue queue must be between $min_n-$max_n"
      exit 1
    fi
  fi
  # All fine, assign the number of nodes
  nodes=$inp
else
  # There was never an option
  nodes=1
fi

# Select the maximum time
if [[ $maxtime > 00:30:00 ]]; then
  if [ -z $t ]; then
    echo "What is the maximum expected time [D-]HH:MM:SS (Max in $queue: $maxtime)?"
    read inp
  else
    inp=$t
  fi
  if [[ ! $inp =~ ([0-9]-)?[0-9]?[0-9]:[0-9][0-9]:[0-9][0-9]$ ]]; then
    echo "Wrong time format"
    exit 1
  else
    if [[ $inp < $min_t || $inp > $maxtime ]]; then
      echo "Expected time for $queue queue should be between $min_t-$maxtime"
      exit 1
    else
      t=$inp
    fi
  fi
else
  t=00:30:00
fi

##################################################
### 2 Setup files for job in scratch directory ###
##################################################

# Check if input file exists
if [[ ! -f $name ]]; then
  echo "Input $name does not exists"
  exit
fi
# Create temporal directory
JOB_DIR=$scr/${name}.$$
mkdir $JOB_DIR
echo "Job dir: $JOB_DIR"

# Copy input to job_dir
cp $wrk/$name $JOB_DIR
# Copy restart  file to job_dir
for rstfile in $(grep ^\ *WFN_RESTART_FILE_NAME $name | tr -s ' ' | cut -d ' ' -f 3); do
  if [[ ! -f ${rstfile} ]]; then
    echo "Restart file ${rstfile} does not exists"
    exit 1
  fi
  echo "Restart calculation. Copying restart file ${rstfile} to $JOB_DIR"
  cp $wrk/${rstfile} $JOB_DIR
done

# Create file for the slurm queueing system in the scratch directory
cd $JOB_DIR
jobfile=${name/.inp/}.job.$$
cat > $jobfile << _EOF_
#!/bin/bash -l

# Slurm options
#SBATCH --job-name="${name/.inp/}"
#SBATCH --account="$account"
#SBATCH --time=$t
#SBATCH --nodes=$nodes
#SBATCH --partition=$queue

# Default settings
#SBATCH --ntasks-per-core=1
#SBATCH --ntasks-per-node=32
#SBATCH --cpus-per-task=8
#SBATCH --hint=exclusive
#SBATCH --hint=nomultithread
#SBATCH --hint=exclusive
#SBATCH --no-requeue
#SBATCH --output=${name/.inp/}.%j.o
#SBATCH --error=${name/.inp/}.%j.e
#SBATCH --uenv=cp2k/2024.3:v1 
#SBATCH --view=develop

export CUDA_CACHE_PATH="/dev/shm/\$RANDOM"
export MPICH_GPU_SUPPORT_ENABLED=1
export MPICH_MALLOC_FALLBACK=1
export OMP_NUM_THREADS=\$((SLURM_CPUS_PER_TASK - 1))
ulimit -s unlimited
# -------------------------------------

# CP2K calculation
CP2K_JOB_LIST=("$name")

# -------------------------------------

# Main script
echo ' Script started: '\$(date)
echo ' CP2K job'
echo ''

# Hostname
echo ' Hostname:'
hostname
echo ''

# Print node settings
echo ' USER: '\${USER}
echo ' SLURM_NNODES: '\${SLURM_NNODES}
echo ' SLURM_NTASKS: '\${SLURM_NTASKS}
echo ' SLURM_NTASKS_PER_NODE: '\${SLURM_NTASKS_PER_NODE}
echo ' SLURM_CPUS_PER_TASK: '\${SLURM_CPUS_PER_TASK}
echo ' SLURM_NTASKS_PER_CORE: '\${SLURM_NTASKS_PER_CORE}
echo ''

JOB_ID=\${SLURM_JOB_ID}
echo ' Job ID: '\$JOB_ID
echo ' Job dir: '\$JOB_DIR
echo ''

# Set-up the CP2K
echo ' set-up CP2K'
# CP2K program executable
CP2K_EXE='cp2k.psmp'
JOBREPORT=\$JOB_DIR
# Main CP2K directory
export CP2K_DIR=$cp2k_path
export CP2K_DATA_DIR=\$CP2K_DIR/data
if [ ! -d \$CP2K_DIR ]; then
    echo ' Error! Directory '\$CP2K_DIR' does not exist.'
    exit -4
fi
echo ' CP2K_DIR: '\$CP2K_DIR
export PATH=\$CP2K_DIR/build/bin:\$PATH
echo ' PATH: '\$PATH
echo ''

# Build SRUN command
srun_options="--cpu-bind=socket $SCRATCH/mps-wrapper.sh $JOBREPORT --"
srun_command="srun \${srun_options}"


# Run the program
# =================================================================

for INP in \${CP2K_JOB_LIST[*]}; do
    echo ' INP = '\$INP
    OUT=\${INP/.inp/}.out
    echo ' OUT = '\$OUT
    echo ' > running job: '\${CP2K_EXE} -i \${INP} > \${OUT}
    \${srun_command} \${CP2K_EXE} -i \${INP} > \${OUT}
    echo ' > job done'
done

# =================================================================

# Unset variables
unset CP2K_DATA_DIR
unset CUDA_CACHE_PATH
unset MPICH_GPU_SUPPORT_ENABLED
unset MPICH_MALLOC_FALLBACK
unset OMP_NUM_THREADS
# -------------------------------------
echo ''
echo 'Job completed'
echo 'Script ended: '\$(date)
exit 0
_EOF_

####################################
### 3 Submit job to queue system ###
####################################

sbatch $jobfile
